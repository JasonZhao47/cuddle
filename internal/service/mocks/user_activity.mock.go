// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/user_activity.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/user_activity.go -destination=internal/service/mocks/user_activity.mock.go -package=svcmock
//
// Package svcmock is a generated GoMock package.
package svcmock

import (
	context "context"
	reflect "reflect"

	domain "github.com/jasonzhao47/cuddle/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserActivityService is a mock of UserActivityService interface.
type MockUserActivityService struct {
	ctrl     *gomock.Controller
	recorder *MockUserActivityServiceMockRecorder
}

// MockUserActivityServiceMockRecorder is the mock recorder for MockUserActivityService.
type MockUserActivityServiceMockRecorder struct {
	mock *MockUserActivityService
}

// NewMockUserActivityService creates a new mock instance.
func NewMockUserActivityService(ctrl *gomock.Controller) *MockUserActivityService {
	mock := &MockUserActivityService{ctrl: ctrl}
	mock.recorder = &MockUserActivityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserActivityService) EXPECT() *MockUserActivityServiceMockRecorder {
	return m.recorder
}

// GetReadByIds mocks base method.
func (m *MockUserActivityService) GetReadByIds(ctx context.Context, biz string, ids []int64) ([]domain.UserActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadByIds", ctx, biz, ids)
	ret0, _ := ret[0].([]domain.UserActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadByIds indicates an expected call of GetReadByIds.
func (mr *MockUserActivityServiceMockRecorder) GetReadByIds(ctx, biz, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadByIds", reflect.TypeOf((*MockUserActivityService)(nil).GetReadByIds), ctx, biz, ids)
}

// IncrRead mocks base method.
func (m *MockUserActivityService) IncrRead(ctx context.Context, biz string, bizId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrRead", ctx, biz, bizId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrRead indicates an expected call of IncrRead.
func (mr *MockUserActivityServiceMockRecorder) IncrRead(ctx, biz, bizId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrRead", reflect.TypeOf((*MockUserActivityService)(nil).IncrRead), ctx, biz, bizId)
}
