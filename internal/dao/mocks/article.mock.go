// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/dao/article.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/dao/article.go -destination=internal/dao/mocks/article.mock.go -package=daomock
//
// Package daomock is a generated GoMock package.
package daomock

import (
	context "context"
	reflect "reflect"

	dao "github.com/jasonzhao47/cuddle/internal/repository/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockArticleDAO is a mock of ArticleDAO interface.
type MockArticleDAO struct {
	ctrl     *gomock.Controller
	recorder *MockArticleDAOMockRecorder
}

// MockArticleDAOMockRecorder is the mock recorder for MockArticleDAO.
type MockArticleDAOMockRecorder struct {
	mock *MockArticleDAO
}

// NewMockArticleDAO creates a new mock instance.
func NewMockArticleDAO(ctrl *gomock.Controller) *MockArticleDAO {
	mock := &MockArticleDAO{ctrl: ctrl}
	mock.recorder = &MockArticleDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleDAO) EXPECT() *MockArticleDAOMockRecorder {
	return m.recorder
}

// GetByAuthorId mocks base method.
func (m *MockArticleDAO) GetByAuthorId(arg0 context.Context, arg1 int64, arg2, arg3 int) ([]*dao.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthorId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*dao.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthorId indicates an expected call of GetByAuthorId.
func (mr *MockArticleDAOMockRecorder) GetByAuthorId(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthorId", reflect.TypeOf((*MockArticleDAO)(nil).GetByAuthorId), arg0, arg1, arg2, arg3)
}

// GetById mocks base method.
func (m *MockArticleDAO) GetById(arg0 context.Context, arg1 int64) (*dao.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*dao.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockArticleDAOMockRecorder) GetById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockArticleDAO)(nil).GetById), arg0, arg1)
}

// Insert mocks base method.
func (m *MockArticleDAO) Insert(arg0 context.Context, arg1 *dao.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockArticleDAOMockRecorder) Insert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockArticleDAO)(nil).Insert), arg0, arg1)
}

// Sync mocks base method.
func (m *MockArticleDAO) Sync(arg0 context.Context, arg1 *dao.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockArticleDAOMockRecorder) Sync(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockArticleDAO)(nil).Sync), arg0, arg1)
}
